import { test, expect, describe } from "vitest";

import { BufferTokenizer } from "../../../strtok3/BufferTokenizer";
import { u8 } from "../../primitive/integer";
import { readUnitFromTokenizer } from "../../utility/read-unit";
import { codecListObject, type CodecListObject } from "../codec-list";

import type { GUID } from "../guid";

describe("unit size: codec list object", () => {
  test("codec list object", () => {
    const [size] = codecListObject(20);

    expect(size).toBe(20);
  });
});

type Case = [description: string, source: number[], expected: CodecListObject];
const cases: Case[] = [
  [
    "parse codec list object",
    [
      // reserved
      0x41, 0x52, 0xd1, 0x86, 0x1d, 0x31, 0xd0, 0x11, 0xa3, 0xa4, 0x00, 0xa0, 0xc9, 0x03, 0x48, 0xf6,
      // codec entries count
      0x02, 0x00, 0x00, 0x00,
      // codec 1 type
      0x03, 0x00,
      // codec 1 name
      0x07, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x63, 0x00, 0x20, 0x00, 0x31, 0x00,
      // codec 1 description
      0x11, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x63, 0x00, 0x20, 0x00, 0x64, 0x00, 0x65, 0x00, 0x73,
      0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
      // codec 1 information
      0x04, 0x00, 0x01, 0x02, 0x03, 0x04,
      // codec 2 type
      0x00, 0x00,
      // codec 2 name
      0x07, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x63, 0x00, 0x20, 0x00, 0x32, 0x00,
      // codec 2 description
      0x11, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x63, 0x00, 0x20, 0x00, 0x64, 0x00, 0x65, 0x00, 0x73,
      0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
      // codec 2 information
      0x04, 0x00, 0x01, 0x02, 0x03, 0x04,
    ],
    {
      reserved: "86D15241-311D-11D0-A3A4-00A0C90348F6" as GUID,
      codecEntriesCount: 0x00_00_00_02,
      codecs: [
        {
          videoCodec: true,
          audioCodec: true,

          codecName: "codec 1",
          description: "codec description",
          information: new Uint8Array([0x01, 0x02, 0x03, 0x04]),
        },
        {
          videoCodec: false,
          audioCodec: false,

          codecName: "codec 2",
          description: "codec description",
          information: new Uint8Array([0x01, 0x02, 0x03, 0x04]),
        },
      ],
    },
  ],
];

describe("unit: codec list object", () => {
  test.each(cases)("%s", async (_, bytes, expected) => {
    const buffer = new Uint8Array(bytes);
    const tokenizer = new BufferTokenizer(buffer);
    const result = readUnitFromTokenizer(tokenizer, codecListObject(buffer.length));

    await expect(result).resolves.toEqual(expected);

    // all bytes are read
    await expect(readUnitFromTokenizer(tokenizer, u8)).rejects.toThrow();
  });
});
