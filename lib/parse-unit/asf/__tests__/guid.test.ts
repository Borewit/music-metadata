import { test, expect, describe } from "vitest";

import { BufferTokenizer } from "../../../strtok3/BufferTokenizer";
import { u8 } from "../../primitive/integer";
import { readUnitFromTokenizer } from "../../utility/read-unit";
import {
  AdvancedContentEncryptionObject,
  AdvancedMutualExclusionObject,
  ASF_Index_Placeholder_Object,
  AudioMedia,
  BandwidthSharingObject,
  BinaryMedia,
  BitrateMutualExclusionObject,
  CodecListObject,
  CommandMedia,
  CompatibilityObject,
  ContentBrandingObject,
  ContentDescriptionObject,
  ContentEncryptionObject,
  DataObject,
  Degradable_JPEG_Media,
  DigitalSignatureObject,
  ErrorCorrectionObject,
  ExtendedContentDescriptionObject,
  ExtendedContentEncryptionObject,
  ExtendedStreamPropertiesObject,
  FilePropertiesObject,
  FileTransferMedia,
  GroupMutualExclusionObject,
  GUID,
  guid,
  HeaderExtensionObject,
  HeaderObject,
  IndexObject,
  IndexParametersObject,
  JFIF_Media,
  LanguageListObject,
  MarkerObject,
  MediaObjectIndexObject,
  MediaObjectIndexParametersObject,
  MetadataLibraryObject,
  MetadataObject,
  PaddingObject,
  ScriptCommandObject,
  SimpleIndexObject,
  StreamBitratePropertiesObject,
  StreamPrioritizationObject,
  StreamPropertiesObject,
  TimecodeIndexObject,
  TimecodeIndexParametersObject,
  VideoMedia,
} from "../guid";

describe("GUID class", () => {
  test("str property", () => {
    const guidStr = "B503BF5F-2EA9-CF11-8EE3-00C00C205365";
    const result = new GUID(guidStr);

    expect(result.str).toBe(guidStr);
  });
});

describe("unit size: GUID", () => {
  test("GUID size = 16", () => {
    const [size] = guid;

    expect(size).toBe(16);
  });
});

type Case = [description: string, source: number[], expected: GUID];
const cases: Case[] = [
  [
    "parse GUID",
    [0xaa, 0xbb, 0xcc, 0xdd, 0x11, 0x22, 0x44, 0x55, 0x0f, 0x1e, 0x2d, 0x3c, 0x4b, 0x5a, 0x69, 0x78],
    new GUID("DDCCBBAA-2211-5544-0F1E-2D3C4B5A6978"),
  ],
  [
    "header object",
    [0x30, 0x26, 0xb2, 0x75, 0x8e, 0x66, 0xcf, 0x11, 0xa6, 0xd9, 0x00, 0xaa, 0x00, 0x62, 0xce, 0x6c],
    HeaderObject,
  ],
  [
    "data object",
    [0x36, 0x26, 0xb2, 0x75, 0x8e, 0x66, 0xcf, 0x11, 0xa6, 0xd9, 0x00, 0xaa, 0x00, 0x62, 0xce, 0x6c],
    DataObject,
  ],
  [
    "simple index object",
    [0x90,0x08,0x00,0x33,0xB1,0xE5,0xCF,0x11,0x89,0xF4,0x00,0xA0,0xC9,0x03,0x49,0xCB],
    SimpleIndexObject,
  ],
  [
    "index object",
    [0xD3,0x29,0xE2,0xD6,0xDA,0x35,0xD1,0x11,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE],
    IndexObject,
  ],
  [
    "media object index object",
    [0xF8,0x03,0xB1,0xFE,0xAD,0x12,0x64,0x4C,0x84,0x0F,0x2A,0x1D,0x2F,0x7A,0xD4,0x8C],
    MediaObjectIndexObject,
  ],
  [
    "timecode index object",
    [0xD0,0x3F,0xB7,0x3C,0x4A,0x0C,0x03,0x48,0x95,0x3D,0xED,0xF7,0xB6,0x22,0x8F,0x0C],
    TimecodeIndexObject,
  ],

  [
    "file properties object",
    [0xA1,0xDC,0xAB,0x8C,0x47,0xA9,0xCF,0x11,0x8E,0xE4,0x00,0xC0,0x0C,0x20,0x53,0x65],
    FilePropertiesObject,
  ],
  [
    "stream properties object",
    [0x91,0x07,0xDC,0xB7,0xB7,0xA9,0xCF,0x11,0x8E,0xE6,0x00,0xC0,0x0C,0x20,0x53,0x65],
    StreamPropertiesObject,
  ],
  [
    "header extension object",
    [0xB5,0x03,0xBF,0x5F,0x2E,0xA9,0xCF,0x11,0x8E,0xE3,0x00,0xC0,0x0C,0x20,0x53,0x65],
    HeaderExtensionObject,
  ],
  [
    "codec list object",
    [0x40,0x52,0xD1,0x86,0x1D,0x31,0xD0,0x11,0xA3,0xA4,0x00,0xA0,0xC9,0x03,0x48,0xF6],
    CodecListObject,
  ],
  [
    "script command object",
    [0x30,0x1A,0xFB,0x1E,0x62,0x0B,0xD0,0x11,0xA3,0x9B,0x00,0xA0,0xC9,0x03,0x48,0xF6],
    ScriptCommandObject,
  ],
  [
    "marker object",
    [0x01,0xCD,0x87,0xF4,0x51,0xA9,0xCF,0x11,0x8E,0xE6,0x00,0xC0,0x0C,0x20,0x53,0x65],
    MarkerObject,
  ],
  [
    "bitrate mutual exclusion object",
    [0xDC,0x29,0xE2,0xD6,0xDA,0x35,0xD1,0x11,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE],
    BitrateMutualExclusionObject,
  ],
  [
    "error correction object",
    [0x35,0x26,0xB2,0x75,0x8E,0x66,0xCF,0x11,0xA6,0xD9,0x00,0xAA,0x00,0x62,0xCE,0x6C],
    ErrorCorrectionObject,
  ],
  [
    "content description object",
    [0x33,0x26,0xB2,0x75,0x8E,0x66,0xCF,0x11,0xA6,0xD9,0x00,0xAA,0x00,0x62,0xCE,0x6C],
    ContentDescriptionObject,
  ],
  [
    "extended content description object",
    [0x40,0xA4,0xD0,0xD2,0x07,0xE3,0xD2,0x11,0x97,0xF0,0x00,0xA0,0xC9,0x5E,0xA8,0x50],
    ExtendedContentDescriptionObject,
  ],
  [
    "content branding object",
    [0xFA,0xB3,0x11,0x22,0x23,0xBD,0xD2,0x11,0xB4,0xB7,0x00,0xA0,0xC9,0x55,0xFC,0x6E],
    ContentBrandingObject,
  ],
  [
    "stream bitrate properties object",
    [0xCE,0x75,0xF8,0x7B,0x8D,0x46,0xD1,0x11,0x8D,0x82,0x00,0x60,0x97,0xC9,0xA2,0xB2],
    StreamBitratePropertiesObject,
  ],
  [
    "content encryption object",
    [0xFB,0xB3,0x11,0x22,0x23,0xBD,0xD2,0x11,0xB4,0xB7,0x00,0xA0,0xC9,0x55,0xFC,0x6E],
    ContentEncryptionObject,
  ],
  [
    "extended content encryption object",
    [0x14,0xE6,0x8A,0x29,0x22,0x26,0x17,0x4C,0xB9,0x35,0xDA,0xE0,0x7E,0xE9,0x28,0x9C],
    ExtendedContentEncryptionObject,
  ],
  [
    "digital signature object",
    [0xFC,0xB3,0x11,0x22,0x23,0xBD,0xD2,0x11,0xB4,0xB7,0x00,0xA0,0xC9,0x55,0xFC,0x6E],
    DigitalSignatureObject,
  ],
  [
    "padding object",
    [0x74,0xD4,0x06,0x18,0xDF,0xCA,0x09,0x45,0xA4,0xBA,0x9A,0xAB,0xCB,0x96,0xAA,0xE8],
    PaddingObject,
  ],

  [
    "extended stream properties object",
    [0xCB,0xA5,0xE6,0x14,0x72,0xC6,0x32,0x43,0x83,0x99,0xA9,0x69,0x52,0x06,0x5B,0x5A],
    ExtendedStreamPropertiesObject,
  ],
  [
    "advanced mutual exclusion object",
    [0xCF,0x49,0x86,0xA0,0x75,0x47,0x70,0x46,0x8A,0x16,0x6E,0x35,0x35,0x75,0x66,0xCD],
    AdvancedMutualExclusionObject,
  ],
  [
    "group mutual exclusion object",
    [0x40,0x5A,0x46,0xD1,0x79,0x5A,0x38,0x43,0xB7,0x1B,0xE3,0x6B,0x8F,0xD6,0xC2,0x49],
    GroupMutualExclusionObject,
  ],
  [
    "stream prioritization object",
    [0x5B,0xD1,0xFE,0xD4,0xD3,0x88,0x4F,0x45,0x81,0xF0,0xED,0x5C,0x45,0x99,0x9E,0x24],
    StreamPrioritizationObject,
  ],
  [
    "bandwidth sharing object",
    [0xE6,0x09,0x96,0xA6,0x7B,0x51,0xD2,0x11,0xB6,0xAF,0x00,0xC0,0x4F,0xD9,0x08,0xE9],
    BandwidthSharingObject,
  ],
  [
    "language list object",
    [0xA9,0x46,0x43,0x7C,0xE0,0xEF,0xFC,0x4B,0xB2,0x29,0x39,0x3E,0xDE,0x41,0x5C,0x85],
    LanguageListObject,
  ],
  [
    "metadata object",
    [0xEA,0xCB,0xF8,0xC5,0xAF,0x5B,0x77,0x48,0x84,0x67,0xAA,0x8C,0x44,0xFA,0x4C,0xCA],
    MetadataObject,
  ],
  [
    "metadata library object",
    [0x94,0x1C,0x23,0x44,0x98,0x94,0xD1,0x49,0xA1,0x41,0x1D,0x13,0x4E,0x45,0x70,0x54],
    MetadataLibraryObject,
  ],
  [
    "index parameters object",
    [0xDF,0x29,0xE2,0xD6,0xDA,0x35,0xD1,0x11,0x90,0x34,0x00,0xA0,0xC9,0x03,0x49,0xBE],
    IndexParametersObject,
  ],
  [
    "media object index parameters object",
    [0xAD,0x3B,0x20,0x6B,0x11,0x3F,0xE4,0x48,0xAC,0xA8,0xD7,0x61,0x3D,0xE2,0xCF,0xA7],
    MediaObjectIndexParametersObject,
  ],
  [
    "timecode index parameters object",
    [0x6D,0x49,0x5E,0xF5,0x97,0x97,0x5D,0x4B,0x8C,0x8B,0x60,0x4D,0xFE,0x9B,0xFB,0x24],
    TimecodeIndexParametersObject,
  ],
  [
    "compatibility object",
    [0x5D,0x8B,0xF1,0x26,0x84,0x45,0xEC,0x47,0x9F,0x5F,0x0E,0x65,0x1F,0x04,0x52,0xC9],
    CompatibilityObject,
  ],
  [
    "advanced content encryption object",
    [0x33,0x85,0x05,0x43,0x81,0x69,0xE6,0x49,0x9B,0x74,0xAD,0x12,0xCB,0x86,0xD5,0x8C],
    AdvancedContentEncryptionObject,
  ],

  [
    "audio media",
    [0x40,0x9E,0x69,0xF8,0x4D,0x5B,0xCF,0x11,0xA8,0xFD,0x00,0x80,0x5F,0x5C,0x44,0x2B],
    AudioMedia,
  ],
  [
    "video media",
    [0xC0,0xEF,0x19,0xBC,0x4D,0x5B,0xCF,0x11,0xA8,0xFD,0x00,0x80,0x5F,0x5C,0x44,0x2B],
    VideoMedia,
  ],
  [
    "command media",
    [0xC0,0xCF,0xDA,0x59,0xE6,0x59,0xD0,0x11,0xA3,0xAC,0x00,0xA0,0xC9,0x03,0x48,0xF6],
    CommandMedia,
  ],
  [
    "JFIF media",
    [0x00,0xE1,0x1B,0xB6,0x4E,0x5B,0xCF,0x11,0xA8,0xFD,0x00,0x80,0x5F,0x5C,0x44,0x2B],
    JFIF_Media,
  ],
  [
    "degradable JPEG media",
    [0xE0,0x7D,0x90,0x35,0x15,0xE4,0xCF,0x11,0xA9,0x17,0x00,0x80,0x5F,0x5C,0x44,0x2B],
    Degradable_JPEG_Media,
  ],
  [
    "file transfer media",
    [0x2C,0x22,0xBD,0x91,0x1C,0xF2,0x7A,0x49,0x8B,0x6D,0x5A,0xA8,0x6B,0xFC,0x01,0x85],
    FileTransferMedia,
  ],
  [
    "binary media",
    [0xE2,0x65,0xFB,0x3A,0xEF,0x47,0xF2,0x40,0xAC,0x2C,0x70,0xA9,0x0D,0x71,0xD3,0x43],
    BinaryMedia,
  ],

  [
    "ASF index placeholder object",
    [0x20, 0xde, 0xAA, 0xD9, 0x17, 0x7c, 0x9c, 0x4f, 0xbc, 0x28, 0x85, 0x55, 0xdd, 0x98, 0xe2, 0xa2],
    ASF_Index_Placeholder_Object,
  ],
];

describe("unit: GUID", () => {
  test.each(cases)("%s", async (_, bytes, expected) => {
    const buffer = new Uint8Array(bytes);
    const tokenizer = new BufferTokenizer(buffer);
    const result = readUnitFromTokenizer(tokenizer, guid);

    await expect(result).resolves.toEqual(expected);

    // all bytes are read
    await expect(readUnitFromTokenizer(tokenizer, u8)).rejects.toThrow();
  });
});
